"""


Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Load environment variables from .env.local file
load_dotenv(Path(__file__).resolve().parent.parent / '.env.local')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2jh2)^kw$euw8xophhuqp_z$muwv6^jg*un9hm&)t--@1pjtsm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required by allauth

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Add authtoken to satisfy dj-rest-auth check
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist', # If using token blacklisting
    'corsheaders', 
    'allauth', # Add allauth
    'allauth.account', # Add allauth.account
    'allauth.socialaccount', # Add allauth.socialaccount
    'allauth.socialaccount.providers.google', # Add google provider if used
    'dj_rest_auth', # Add dj_rest_auth
    'dj_rest_auth.registration', # Add dj_rest_auth.registration

    # API Documentation
    'drf_spectacular',

    # Project-wide utils
    'common',

    # Your apps
    'apps.authentication',
    'apps.waste',
    'apps.challenges',  # Fixed spelling to match directory name
    'apps.user',
    'apps.leaderboard',
    'apps.notifications',
    'apps.rewards',
    'apps.community',
    'apps.course',
    'apps.goals',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Ensure CorsMiddleware is high up
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Add allauth middleware
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Set SITE_ID required by django.contrib.sites (used by allauth)
SITE_ID = 1

# Custom Authentication Backend (adjust if needed)
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    # Your custom backend
    # 'apps.authentication.backends.EmailBackend', # allauth backend handles email login
)

# django-allauth Configuration
ACCOUNT_LOGIN_METHODS = ['email']  # Use email for login, replaces ACCOUNT_AUTHENTICATION_METHOD
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']  # Fields required at signup

# Change from 'optional' to 'none' for testing purposes
ACCOUNT_EMAIL_VERIFICATION = 'none' # Or 'mandatory' or 'optional'

# Set a dummy EMAIL_BACKEND for development so we don't need an actual mail server
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGOUT_ON_GET = True  # Allow logout with a GET request
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/login/'  # Redirect to login page after logout
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = None # Or True
ACCOUNT_USERNAME_BLACKLIST = []
ACCOUNT_USERNAME_MIN_LENGTH = 1

# Social Account Settings (Example for Google)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each provider, you can define specific settings.
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        # You need to replace these with your actual Google API credentials
        'APP': {
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            'key': ''
        }
    }
}

# Skip the intermediate social login confirmation page
SOCIALACCOUNT_LOGIN_ON_GET = True

# Auto-connect social accounts to existing users with the same email
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = True

# Automatically connect social accounts to existing Django users with matching email
SOCIALACCOUNT_ADAPTER = 'apps.authentication.adapters.CustomSocialAccountAdapter'

# Where to redirect after successful login
LOGIN_REDIRECT_URL = '/waste/'  # Redirect to the waste dashboard

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'EcoChallenge Platform API',
    'DESCRIPTION': 'API documentation for the EcoChallenge platform promoting sustainable habits',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {'name': 'Group 3', 'url': 'https://github.com/bounswe/bounswe2025group3'},
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
    },
    'SECURITY': [
        {
            'Bearer': [],
        }
    ],
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': False,
}

AUTH_USER_MODEL = 'user.CustomUser'

# dj-rest-auth Settings
REST_AUTH = {
    'REGISTER_SERIALIZER': 'apps.authentication.api.v1.serializers.CustomRegisterSerializer', # Correct path
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth', # Name of the cookie to save the JWT
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token', # Name of the cookie to save the refresh token
    'SESSION_LOGIN': False, # Disable session login as we use JWT
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Very short lifetime for testing
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # 1 day
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_OBTAIN_SERIALIZER': 'apps.authentication.api.v1.serializers.CustomTokenObtainPairSerializer', # Use our custom serializer
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'VERIFY_EXPIRATION': True,
}

# Custom login URL
LOGIN_URL = '/login/'

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:10000',  # Backend itself
    'http://localhost:10000',   # Backend alternative
    'http://localhost:3000',   # Frontend origin
    'https://ecochallenge-frontend.onrender.com',
    'https://ecochallenge-backend.onrender.com',
]

# Allow credentials (cookies, authorization headers) to be sent with requests
CORS_ALLOW_CREDENTIALS = True